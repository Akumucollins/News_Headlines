[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_sources",
        "importPath": "app.request",
        "description": "app.request",
        "isExtraImport": true,
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nimport app.request\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Bootstrap",
        "importPath": "flask_bootstrap",
        "description": "flask_bootstrap",
        "isExtraImport": true,
        "detail": "flask_bootstrap",
        "documentation": {
            "value": "\n```python\nimport flask_bootstrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "config_options",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {
            "value": "\n```python\nimport config\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urllib.request,json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request.json",
        "description": "urllib.request.json",
        "detail": "urllib.request.json",
        "documentation": {
            "value": "\n```python\nimport urllib.request.json\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {
            "value": "\n```python\nimport unittest\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Articles",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nimport app.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Category",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nimport app.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Source",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nimport app.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {
            "value": "\n```python\nimport app\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {
            "value": "\n```python\nimport app\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Manager",
        "importPath": "flask_script",
        "description": "flask_script",
        "isExtraImport": true,
        "detail": "flask_script",
        "documentation": {
            "value": "\n```python\nimport flask_script\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Server",
        "importPath": "flask_script",
        "description": "flask_script",
        "isExtraImport": true,
        "detail": "flask_script",
        "documentation": {
            "value": "\n```python\nimport flask_script\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "app.main.__init__",
        "description": "app.main.__init__",
        "peekOfCode": "main = Blueprint('main',__name__)\nfrom . import views,error",
        "detail": "app.main.__init__",
        "documentation": {
            "value": "\n```python\nfrom app.main.__init__ import main\n```\n\n```python\n\n\n```\n\n```python\nmain = Blueprint('main',__name__)\nfrom . import views,error\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "four_Oh_four",
        "kind": 2,
        "importPath": "app.main.error",
        "description": "app.main.error",
        "peekOfCode": "def four_Oh_four(error):\n    '''\n    Function to render the 404 error page\n    '''\n    return render_template('fourOhfour.html'),404",
        "detail": "app.main.error",
        "documentation": {
            "value": "\n```python\nfrom app.main.error import four_Oh_four\n```\n\n```python\n\n\n```\n\n```python\ndef four_Oh_four(error):\n    '''\n    Function to render the 404 error page\n    '''\n    return render_template('fourOhfour.html'),404\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.main.views",
        "description": "app.main.views",
        "peekOfCode": "def index():\n    '''\n    View root page function that returns the index page and\n    its data\n    '''\n    general_sources = get_sources('general')\n    sports_sources = get_sources('sports')\n    technology_sources = get_sources('technology')\n    entertainment_sources = get_sources('entertainment')\n    business_sources = get_sources('business')",
        "detail": "app.main.views",
        "documentation": {
            "value": "\n```python\nfrom app.main.views import index\n```\n\n```python\n\n\n```\n\n```python\ndef index():\n    '''\n    View root page function that returns the index page and\n    its data\n    '''\n    general_sources = get_sources('general')\n    sports_sources = get_sources('sports')\n    technology_sources = get_sources('technology')\n    entertainment_sources = get_sources('entertainment')\n    business_sources = get_sources('business')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "article",
        "kind": 2,
        "importPath": "app.main.views",
        "description": "app.main.views",
        "peekOfCode": "def article(id):\n    '''\n    View article page function that returns the various article details page and its data\n    '''\n    articles = article_source(id)\n    return render_template('article.html',articles= articles,id=id )\n@main.route('/categories/<category_name>')\ndef category(category_name):\n    '''\n    function to return the categories.html page and its content",
        "detail": "app.main.views",
        "documentation": {
            "value": "\n```python\nfrom app.main.views import article\n```\n\n```python\n\n\n```\n\n```python\ndef article(id):\n    '''\n    View article page function that returns the various article details page and its data\n    '''\n    articles = article_source(id)\n    return render_template('article.html',articles= articles,id=id )\n@main.route('/categories/<category_name>')\ndef category(category_name):\n    '''\n    function to return the categories.html page and its content\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "category",
        "kind": 2,
        "importPath": "app.main.views",
        "description": "app.main.views",
        "peekOfCode": "def category(category_name):\n    '''\n    function to return the categories.html page and its content\n    '''\n    category = get_category(category_name)\n    title = f'{category_name}'\n    categories = category_name\n    return render_template('categories.html',title = title,category = category, categories= category_name)",
        "detail": "app.main.views",
        "documentation": {
            "value": "\n```python\nfrom app.main.views import category\n```\n\n```python\n\n\n```\n\n```python\ndef category(category_name):\n    '''\n    function to return the categories.html page and its content\n    '''\n    category = get_category(category_name)\n    title = f'{category_name}'\n    categories = category_name\n    return render_template('categories.html',title = title,category = category, categories= category_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "app.__init__",
        "description": "app.__init__",
        "peekOfCode": "def create_app(config_name):\n    app = Flask(__name__)\n    # Creating the app configurations\n    app.config.from_object(config_options[config_name])\n    # Initializing flask extensions\n    bootstrap.init_app(app)\n# Registering the blueprint\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n# setting config",
        "detail": "app.__init__",
        "documentation": {
            "value": "\n```python\nfrom app.__init__ import create_app\n```\n\n```python\n\n\n```\n\n```python\ndef create_app(config_name):\n    app = Flask(__name__)\n    # Creating the app configurations\n    app.config.from_object(config_options[config_name])\n    # Initializing flask extensions\n    bootstrap.init_app(app)\n# Registering the blueprint\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n# setting config\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bootstrap",
        "kind": 5,
        "importPath": "app.__init__",
        "description": "app.__init__",
        "peekOfCode": "bootstrap = Bootstrap()\ndef create_app(config_name):\n    app = Flask(__name__)\n    # Creating the app configurations\n    app.config.from_object(config_options[config_name])\n    # Initializing flask extensions\n    bootstrap.init_app(app)\n# Registering the blueprint\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)",
        "detail": "app.__init__",
        "documentation": {
            "value": "\n```python\nfrom app.__init__ import bootstrap\n```\n\n```python\n\n\n```\n\n```python\nbootstrap = Bootstrap()\ndef create_app(config_name):\n    app = Flask(__name__)\n    # Creating the app configurations\n    app.config.from_object(config_options[config_name])\n    # Initializing flask extensions\n    bootstrap.init_app(app)\n# Registering the blueprint\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Source:\n    '''\n    Source class to define source objects\n    '''\n    def __init__(self,id,name,description,url,category,language,country):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.url = url\n        self.category = category",
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nfrom app.models import Source\n```\n\n```python\n\n\n```\n\n```python\nclass Source:\n    '''\n    Source class to define source objects\n    '''\n    def __init__(self,id,name,description,url,category,language,country):\n        self.id = id\n        self.name = name\n        self.description = description\n        self.url = url\n        self.category = category\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Article",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Article:\n    '''\n    Class that instantiates objects of the news article objects of the news sources\n    '''\n    def __init__(self,id,name,author,title,description,url,urlToImage,publishedAt):\n        self.id = id\n        self.name = name\n        self.author = author\n        self.title = title\n        self.description = description",
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nfrom app.models import Article\n```\n\n```python\n\n\n```\n\n```python\nclass Article:\n    '''\n    Class that instantiates objects of the news article objects of the news sources\n    '''\n    def __init__(self,id,name,author,title,description,url,urlToImage,publishedAt):\n        self.id = id\n        self.name = name\n        self.author = author\n        self.title = title\n        self.description = description\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Category:\n    '''\n    Class that instantiates objects of the news categories objects of the news sources\n    '''\n    def __init__(self,author,description,time,url,image,title):\n        self.author = author\n        self.description = description\n        self.time = time\n        self.url = url\n        self.image = image",
        "detail": "app.models",
        "documentation": {
            "value": "\n```python\nfrom app.models import Category\n```\n\n```python\n\n\n```\n\n```python\nclass Category:\n    '''\n    Class that instantiates objects of the news categories objects of the news sources\n    '''\n    def __init__(self,author,description,time,url,image,title):\n        self.author = author\n        self.description = description\n        self.time = time\n        self.url = url\n        self.image = image\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "configure_request",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):\n    '''\n    Function that gets json response to our url request\n    '''\n    get_sources_url = base_url.format(category,api_key)",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import configure_request\n```\n\n```python\n\n\n```\n\n```python\ndef configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):\n    '''\n    Function that gets json response to our url request\n    '''\n    get_sources_url = base_url.format(category,api_key)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_sources",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def get_sources(category):\n    '''\n    Function that gets json response to our url request\n    '''\n    get_sources_url = base_url.format(category,api_key)\n    with urllib.request.urlopen(get_sources_url) as url:\n        get_sources_data = url.read()\n        get_sources_response = json.loads(get_sources_data)\n        sources_results = None\n        if get_sources_response['sources']:",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import get_sources\n```\n\n```python\n\n\n```\n\n```python\ndef get_sources(category):\n    '''\n    Function that gets json response to our url request\n    '''\n    get_sources_url = base_url.format(category,api_key)\n    with urllib.request.urlopen(get_sources_url) as url:\n        get_sources_data = url.read()\n        get_sources_response = json.loads(get_sources_data)\n        sources_results = None\n        if get_sources_response['sources']:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "process_sources",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def process_sources(sources_list):\n    '''\n    function that processes the news results and transform them to a list of objects\n    Args:\n        sources_list: A list of dictionaries that contain news details\n    Returns:\n        sources_results: Alist of news source objects\n    '''\n    sources_results = []\n    for sources_item in sources_list:",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import process_sources\n```\n\n```python\n\n\n```\n\n```python\ndef process_sources(sources_list):\n    '''\n    function that processes the news results and transform them to a list of objects\n    Args:\n        sources_list: A list of dictionaries that contain news details\n    Returns:\n        sources_results: Alist of news source objects\n    '''\n    sources_results = []\n    for sources_item in sources_list:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "article_source",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def article_source(id):\n    article_source_url = 'https://newsapi.org/v2/top-headlines?sources={}&apiKey={}'.format(id,api_key)\n    with urllib.request.urlopen(article_source_url) as url:\n        article_source_data = url.read()\n        article_source_response = json.loads(article_source_data)\n        article_source_results = None\n        if article_source_response['articles']:\n            article_source_list = article_source_response['articles']\n            article_source_results = process_articles_results(article_source_list)\n    return article_source_results",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import article_source\n```\n\n```python\n\n\n```\n\n```python\ndef article_source(id):\n    article_source_url = 'https://newsapi.org/v2/top-headlines?sources={}&apiKey={}'.format(id,api_key)\n    with urllib.request.urlopen(article_source_url) as url:\n        article_source_data = url.read()\n        article_source_response = json.loads(article_source_data)\n        article_source_results = None\n        if article_source_response['articles']:\n            article_source_list = article_source_response['articles']\n            article_source_results = process_articles_results(article_source_list)\n    return article_source_results\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "process_articles_results",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def process_articles_results(articles_list):\n    '''\n    process the dictionary and output a list of objects\n    '''\n    article_source_results = []\n    source_dictionary = {}\n    for result in articles_list:\n        source_id = result ['source']\n        source_dictionary['id'] = source_id['id']\n        source_dictionary['name'] = source_id['name']",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import process_articles_results\n```\n\n```python\n\n\n```\n\n```python\ndef process_articles_results(articles_list):\n    '''\n    process the dictionary and output a list of objects\n    '''\n    article_source_results = []\n    source_dictionary = {}\n    for result in articles_list:\n        source_id = result ['source']\n        source_dictionary['id'] = source_id['id']\n        source_dictionary['name'] = source_id['name']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_category",
        "kind": 2,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "def get_category(category_name):\n    '''\n    function that gets the response to the category json\n    '''\n    get_category_url = category_url.format(category_name,api_key)\n    print(get_category_url)\n    with urllib.request.urlopen(get_category_url) as url:\n        get_category_data = url.read()\n        get_cartegory_response = json.loads(get_category_data)\n        get_cartegory_results = None",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import get_category\n```\n\n```python\n\n\n```\n\n```python\ndef get_category(category_name):\n    '''\n    function that gets the response to the category json\n    '''\n    get_category_url = category_url.format(category_name,api_key)\n    print(get_category_url)\n    with urllib.request.urlopen(get_category_url) as url:\n        get_category_data = url.read()\n        get_cartegory_response = json.loads(get_category_data)\n        get_cartegory_results = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "api_key = None\n#getting news base url\nbase_url = None\ncategory_url= None\ndef configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import api_key\n```\n\n```python\n\n\n```\n\n```python\napi_key = None\n#getting news base url\nbase_url = None\ncategory_url= None\ndef configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "app.request",
        "description": "app.request",
        "peekOfCode": "base_url = None\ncategory_url= None\ndef configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):\n    '''\n    Function that gets json response to our url request",
        "detail": "app.request",
        "documentation": {
            "value": "\n```python\nfrom app.request import base_url\n```\n\n```python\n\n\n```\n\n```python\nbase_url = None\ncategory_url= None\ndef configure_request(app):\n    global api_key,base_url,category_url\n    api_key=app.config['NEWS_API_KEY']\n    base_url=app.config['NEWS_API_BASE_URL']\n    category_url=app.config['CATEGORY_API_URL']\ndef get_sources(category):\n    '''\n    Function that gets json response to our url request\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ArticleTest",
        "kind": 6,
        "importPath": "tests.articles_test",
        "description": "tests.articles_test",
        "peekOfCode": "class ArticleTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Article class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_article = Articles('MIKE ISAAC and TAYLOR LORENZ','Sumter mirrors SC, nation in COVID-19\\'s disproportionate impact on African-Americans','2020-09-12T01:20:00Z','https://edition.cnn.com/','https://www.nytimes.com/article/wildfires-photos-california-oregon-washington-state.html','News and buzz')\n    def test_instance(self):",
        "detail": "tests.articles_test",
        "documentation": {
            "value": "\n```python\nfrom tests.articles_test import ArticleTest\n```\n\n```python\n\n\n```\n\n```python\nclass ArticleTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Article class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_article = Articles('MIKE ISAAC and TAYLOR LORENZ','Sumter mirrors SC, nation in COVID-19\\'s disproportionate impact on African-Americans','2020-09-12T01:20:00Z','https://edition.cnn.com/','https://www.nytimes.com/article/wildfires-photos-california-oregon-washington-state.html','News and buzz')\n    def test_instance(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CategoryTest",
        "kind": 6,
        "importPath": "tests.category_test",
        "description": "tests.category_test",
        "peekOfCode": "class CategoryTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Category class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_category = Category('MIKE ISAAC and TAYLOR LORENZ','Sumter mirrors SC, nation in COVID-19\\'s disproportionate impact on African-Americans','2020-09-12T01:20:00Z','https://edition.cnn.com/','https://www.nytimes.com/article/wildfires-photos-california-oregon-washington-state.html','News and buzz')\n    def test_instance(self):",
        "detail": "tests.category_test",
        "documentation": {
            "value": "\n```python\nfrom tests.category_test import CategoryTest\n```\n\n```python\n\n\n```\n\n```python\nclass CategoryTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Category class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_category = Category('MIKE ISAAC and TAYLOR LORENZ','Sumter mirrors SC, nation in COVID-19\\'s disproportionate impact on African-Americans','2020-09-12T01:20:00Z','https://edition.cnn.com/','https://www.nytimes.com/article/wildfires-photos-california-oregon-washington-state.html','News and buzz')\n    def test_instance(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourcesTest",
        "kind": 6,
        "importPath": "tests.sources_test",
        "description": "tests.sources_test",
        "peekOfCode": "class SourcesTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Source class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_source = Source('CNN','CNN News','View the latest news and breaking news today for U.S., world, weather, entertainment, politics and health at CNN','https://www.nytimes.com/2020/09/11/us/fires-oregon-california-washington.html','Business News','BBC News','en')\n    def test_instance(self):",
        "detail": "tests.sources_test",
        "documentation": {
            "value": "\n```python\nfrom tests.sources_test import SourcesTest\n```\n\n```python\n\n\n```\n\n```python\nclass SourcesTest(unittest.TestCase):\n    '''\n    Test Class to test the behaviour of the Source class\n    '''\n    def setUp(self):\n        '''\n        Set up method that will run before every Test\n        '''\n        self.new_source = Source('CNN','CNN News','View the latest news and breaking news today for U.S., world, weather, entertainment, politics and health at CNN','https://www.nytimes.com/2020/09/11/us/fires-oregon-california-washington.html','Business News','BBC News','en')\n    def test_instance(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BasicsTestCase",
        "kind": 6,
        "importPath": "tests.test_basics",
        "description": "tests.test_basics",
        "peekOfCode": "class BasicsTestCase(unittest.TestCase):\n    def setUp(self):\n        '''\n        Method called to prepare the test fixture. This is called immediately before calling the test method; other than AssertionError or SkipTest, any exception raised by this method will be considered an error rather than a test failure.\n        '''\n        self.app = create_app('development')\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n    def tearDown(self):\n        '''",
        "detail": "tests.test_basics",
        "documentation": {
            "value": "\n```python\nfrom tests.test_basics import BasicsTestCase\n```\n\n```python\n\n\n```\n\n```python\nclass BasicsTestCase(unittest.TestCase):\n    def setUp(self):\n        '''\n        Method called to prepare the test fixture. This is called immediately before calling the test method; other than AssertionError or SkipTest, any exception raised by this method will be considered an error rather than a test failure.\n        '''\n        self.app = create_app('development')\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n    def tearDown(self):\n        '''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    '''\n    General configuration parent class\n    '''\n    NEWS_API_BASE_URL = 'https://newsapi.org/v2/sources?category={}&apiKey={}'\n    NEWS_API_KEY=os.environ.get('NEWS_API_KEY')\n    CATEGORY_API_URL='https://newsapi.org/v2/top-headlines?country=us&category={}&apiKey={}'\nclass ProdConfig(Config):\n    '''\n    Production  configuration child class",
        "detail": "config",
        "documentation": {
            "value": "\n```python\nfrom config import Config\n```\n\n```python\n\n\n```\n\n```python\nclass Config:\n    '''\n    General configuration parent class\n    '''\n    NEWS_API_BASE_URL = 'https://newsapi.org/v2/sources?category={}&apiKey={}'\n    NEWS_API_KEY=os.environ.get('NEWS_API_KEY')\n    CATEGORY_API_URL='https://newsapi.org/v2/top-headlines?country=us&category={}&apiKey={}'\nclass ProdConfig(Config):\n    '''\n    Production  configuration child class\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProdConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ProdConfig(Config):\n    '''\n    Production  configuration child class\n    Args:\n        Config: The parent configuration class with General configuration settings\n    '''\n    pass\nclass DevConfig(Config):\n    '''\n    Development  configuration child class",
        "detail": "config",
        "documentation": {
            "value": "\n```python\nfrom config import ProdConfig\n```\n\n```python\n\n\n```\n\n```python\nclass ProdConfig(Config):\n    '''\n    Production  configuration child class\n    Args:\n        Config: The parent configuration class with General configuration settings\n    '''\n    pass\nclass DevConfig(Config):\n    '''\n    Development  configuration child class\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DevConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevConfig(Config):\n    '''\n    Development  configuration child class\n    Args:\n        Config: The parent configuration class with General configuration settings\n    '''\n    DEBUG = True\nconfig_options = {\n'development':DevConfig,\n'production':ProdConfig",
        "detail": "config",
        "documentation": {
            "value": "\n```python\nfrom config import DevConfig\n```\n\n```python\n\n\n```\n\n```python\nclass DevConfig(Config):\n    '''\n    Development  configuration child class\n    Args:\n        Config: The parent configuration class with General configuration settings\n    '''\n    DEBUG = True\nconfig_options = {\n'development':DevConfig,\n'production':ProdConfig\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "config_options",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "config_options = {\n'development':DevConfig,\n'production':ProdConfig\n}",
        "detail": "config",
        "documentation": {
            "value": "\n```python\nfrom config import config_options\n```\n\n```python\n\n\n```\n\n```python\nconfig_options = {\n'development':DevConfig,\n'production':ProdConfig\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':\n    manager.run()",
        "detail": "manage",
        "documentation": {
            "value": "\n```python\nfrom manage import test\n```\n\n```python\n\n\n```\n\n```python\ndef test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':\n    manager.run()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "app = create_app('development')\nmanager = Manager(app)\nmanager.add_command('server',Server)\n@manager.command\ndef test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':",
        "detail": "manage",
        "documentation": {
            "value": "\n```python\nfrom manage import app\n```\n\n```python\n\n\n```\n\n```python\napp = create_app('development')\nmanager = Manager(app)\nmanager.add_command('server',Server)\n@manager.command\ndef test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "manager",
        "kind": 5,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "manager = Manager(app)\nmanager.add_command('server',Server)\n@manager.command\ndef test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':\n    manager.run()",
        "detail": "manage",
        "documentation": {
            "value": "\n```python\nfrom manage import manager\n```\n\n```python\n\n\n```\n\n```python\nmanager = Manager(app)\nmanager.add_command('server',Server)\n@manager.command\ndef test():\n    \"\"\"Run the unit tests.\"\"\"\n    import unittest\n    tests = unittest.TestLoader().discover('tests')\n    unittest.TextTestRunner(verbosity=2).run(tests)\nif __name__ == '__main__':\n    manager.run()\n```\n",
            "supportThemeIcons": false
        }
    }
]